using Microsoft.EntityFrameworkCore;
using backend.Models;

namespace backend.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        // === DBSETS PRINCIPAIS ===
        public DbSet<Usuario> Usuarios { get; set; } = null!;
        public DbSet<Crianca> Criancas { get; set; } = null!;
        public DbSet<Atividade> Atividades { get; set; } = null!;
        public DbSet<RespostaAtividade> RespostasAtividades { get; set; } = null!;
        public DbSet<Comentario> Comentarios { get; set; } = null!;
        public DbSet<Questao> Questoes { get; set; } = null!;
        public DbSet<Alternativa> Alternativas { get; set; } = null!;

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // === USUÁRIOS ===
            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.ToTable("usuarios");
                entity.HasKey(u => u.Id);
                entity.Property(u => u.Id).HasColumnName("id_usuario");
                entity.Property(u => u.Nome).HasColumnName("nome").IsRequired();
                entity.Property(u => u.Email).HasColumnName("email").IsRequired();
                entity.Property(u => u.SenhaHash).HasColumnName("senha").IsRequired();
                entity.Property(u => u.Perfil).HasColumnName("perfil").IsRequired();
            });

            // === CRIANÇAS ===
            modelBuilder.Entity<Crianca>(entity =>
            {
                entity.ToTable("criancas");
                entity.HasKey(c => c.Id);
                entity.Property(c => c.Id).HasColumnName("id_crianca");
                entity.Property(c => c.Nome).HasColumnName("nome").IsRequired();
                entity.Property(c => c.DataNascimento).HasColumnName("data_nascimento");
                entity.Property(c => c.Genero).HasColumnName("genero");
                entity.Property(c => c.ResponsavelId).HasColumnName("id_responsavel");

                entity.HasOne(c => c.Responsavel)
                      .WithMany()
                      .HasForeignKey(c => c.ResponsavelId);
            });

            // === ATIVIDADES ===
            modelBuilder.Entity<Atividade>(entity =>
            {
                entity.ToTable("atividades");
                entity.HasKey(a => a.Id);
                entity.Property(a => a.Id).HasColumnName("id_atividade");
                entity.Property(a => a.Titulo).HasColumnName("titulo").IsRequired();
                entity.Property(a => a.Descricao).HasColumnName("descricao");
                entity.Property(a => a.FaixaEtaria).HasColumnName("faixa_etaria");
                entity.Property(a => a.Categoria).HasColumnName("categoria");
            });

            // === RESPOSTAS ===
            modelBuilder.Entity<RespostaAtividade>(entity =>
            {
                entity.ToTable("respostas_atividades");
                entity.HasKey(r => r.Id);
                entity.Property(r => r.Id).HasColumnName("id_resposta");
                entity.Property(r => r.CriancaId).HasColumnName("id_crianca");
                entity.Property(r => r.AtividadeId).HasColumnName("id_atividade");
                entity.Property(r => r.Desempenho).HasColumnName("desempenho");
                entity.Property(r => r.DataRealizacao).HasColumnName("data_realizacao");

                entity.HasOne(r => r.Crianca)
                      .WithMany()
                      .HasForeignKey(r => r.CriancaId);

                entity.HasOne(r => r.Atividade)
                      .WithMany()
                      .HasForeignKey(r => r.AtividadeId);
            });

            // === COMENTÁRIOS ===
            modelBuilder.Entity<Comentario>(entity =>
            {
                entity.ToTable("comentarios");
                entity.HasKey(c => c.Id);
                entity.Property(c => c.Id).HasColumnName("id_comentario");
                entity.Property(c => c.Texto).HasColumnName("texto").IsRequired();
                entity.Property(c => c.UsuarioId).HasColumnName("id_usuario");
                entity.Property(c => c.AtividadeId).HasColumnName("id_atividade");
                entity.Property(c => c.DataCriacao).HasColumnName("data_criacao");
                entity.Property(c => c.Status).HasColumnName("status");

                entity.HasOne(c => c.Usuario)
                      .WithMany()
                      .HasForeignKey(c => c.UsuarioId);

                entity.HasOne(c => c.Atividade)
                      .WithMany()
                      .HasForeignKey(c => c.AtividadeId);
            });

            // === QUESTÕES ===
           modelBuilder.Entity<Questao>(entity =>
{
    entity.ToTable("questoes");
    entity.HasKey(q => q.Id);
    entity.Property(q => q.Id).HasColumnName("id_questao");
    entity.Property(q => q.AtividadeId).HasColumnName("id_atividade");
    entity.Property(q => q.Pergunta).HasColumnName("pergunta");
    entity.Property(q => q.Tipo).HasColumnName("tipo");

    entity.HasOne(q => q.Atividade)
          .WithMany(a => a.Questoes)
          .HasForeignKey(q => q.AtividadeId);
});
            // === ALTERNATIVAS ===
            modelBuilder.Entity<Alternativa>(entity =>
{
    entity.ToTable("alternativas");
    entity.HasKey(a => a.Id);
    entity.Property(a => a.Id).HasColumnName("id_alternativa");
    entity.Property(a => a.QuestaoId).HasColumnName("id_questao");
    entity.Property(a => a.Texto).HasColumnName("texto");
    entity.Property(a => a.Correta).HasColumnName("correta");

    entity.HasOne(a => a.Questao)
          .WithMany(q => q.Alternativas)
          .HasForeignKey(a => a.QuestaoId);
});
        }
    }
}
