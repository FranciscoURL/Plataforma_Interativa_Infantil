@model backend.ViewModels.CriarAtividadeViewModel
@{
    ViewData["Title"] = "Criar Nova Atividade";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    <h1>Criar Nova Atividade</h1>
    <p class="text-muted">Preencha os detalhes abaixo para criar uma nova atividade para os alunos.</p>

    <form asp-action="CriarAtividade" method="post">
        <div class="card p-3 shadow-sm">
            <h4 class="mb-3">Detalhes da Atividade</h4>
            <div asp-validation-summary="All" class="text-danger mb-3"></div>
            
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="Titulo" class="form-label">Título</label>
                    <input asp-for="Titulo" class="form-control" />
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="Categoria" class="form-label">Categoria</label>
                    <input asp-for="Categoria" class="form-control" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="Descricao" class="form-label">Descrição (Opcional)</label>
                    <input asp-for="Descricao" class="form-control" />
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="FaixaEtaria" class="form-label">Faixa Etária (Opcional)</label>
                    <input asp-for="FaixaEtaria" class="form-control" />
                </div>
            </div>

            <hr />

            <h4 class="mb-3">Questões</h4>
            <div id="questoes-container">
                @for (int i = 0; i < Model.Questoes.Count; i++)
                {
                    <div class="card p-3 mb-3 questao-item">
                        <h5>Questão @(i + 1)</h5>
                        <div class="mb-3">
                            <label class="form-label">Texto da Pergunta</label>
                            <input asp-for="Questoes[i].Pergunta" class="form-control" />
                        </div>
                        <h6>Alternativas (marque a correta)</h6>
                        @for (int j = 0; j < Model.Questoes[i].Alternativas.Count; j++)
                        {
                            <div class="input-group mb-2">
                                <div class="input-group-text">
                                    <input class="form-check-input mt-0" type="radio" value="@j" name="Questoes[@i].AlternativaCorreta" required />
                                </div>
                                <input asp-for="Questoes[i].Alternativas[j].Texto" class="form-control" placeholder="Texto da alternativa @(j + 1)" />
                                <input type="hidden" asp-for="Questoes[i].Alternativas[j].Correta" value="@Model.Questoes[i].Alternativas[j].Correta.ToString().ToLower()" />
                            </div>
                        }
                    </div>
                }
            </div>
            
            <div class="d-flex justify-content-between mt-3">
                <button type="button" id="add-questao" class="btn btn-secondary">Adicionar Outra Questão</button>
                <button type="submit" class="btn btn-primary">Salvar Atividade</button>
            </div>
        </div>
    </form>
</div>


@section Scripts {
    <script>
    document.getElementById('add-questao').addEventListener('click', function() {
        const container = document.getElementById('questoes-container');
        const index = container.getElementsByClassName('questao-item').length;
        
        const template = `
        <div class="card p-3 mb-3 questao-item">
            <h5>Questão ${index + 1}</h5>
            <div class="mb-3">
                <label class="form-label">Texto da Pergunta</label>
                <input name="Questoes[${index}].Pergunta" class="form-control" required/>
            </div>
            <h6>Alternativas (marque a correta)</h6>
            ${[0,1,2,3].map(j => `
            <div class="input-group mb-2">
                <div class="input-group-text">
                    <input class="form-check-input mt-0" type="radio" value="${j}" name="Questoes[${index}].AlternativaCorreta" required />
                </div>
                <input name="Questoes[${index}].Alternativas[${j}].Texto" class="form-control" placeholder="Texto da alternativa ${j+1}" required/>
                <input type="hidden" name="Questoes[${index}].Alternativas[${j}].Correta" value="false" />
            </div>
            `).join('')}
        </div>`;
        
        container.insertAdjacentHTML('beforeend', template);
    });

    // Lógica para garantir que o valor do radio button seja atribuído corretamente ao campo hidden
    document.body.addEventListener('change', function(e) {
        if (e.target.type === 'radio' && e.target.name.includes('AlternativaCorreta')) {
            const nameParts = e.target.name.split(/[\[\]]/).filter(Boolean); // ex: ["Questoes", "0", "AlternativaCorreta"]
            const questaoIndex = nameParts[1];
            
            // 1. Limpa todos os hiddens do mesmo grupo de questões para 'false'
            const hiddenInputs = document.querySelectorAll(`input[type=hidden][name^="Questoes[${questaoIndex}].Alternativas"]`);
            hiddenInputs.forEach(input => input.value = 'false');
            
            // 2. Marca o hidden correspondente ao radio selecionado como 'true'
            const alternativaIndex = e.target.value;
            const hiddenCorreto = document.querySelector(`input[type=hidden][name="Questoes[${questaoIndex}].Alternativas[${alternativaIndex}].Correta"]`);
            if (hiddenCorreto) {
                hiddenCorreto.value = 'true';
            }
        }
    });
    </script>
}

